
Controllers API 

CONTROLLERS/SERVER.JS

    GET /events   
        - displays all events
        - passes array ('events') that contains all the event objects from the database
        - renders index.ejs

    GET /events/:id
        - displays a single event
        - passes object ('event') that contains information about the event that matches the :id param
        - renders show.ejs

    GET /cart
        - displays the events the client has selected
        - information about selected tickets and the client is stored in an object ('session')
        - renders cart.ejs

    POST /cart/:id
        - creates new session object
        - adds event reference to session object
        - creates new cookie with sessionID equal to session._id
        - redirects to /cart

    POST /cart/update
        - displays the updated cart, with values specified by client at get:cart
        - renders cart.ejs with updated values

    POST /cart/remove
        - removes all selected tickets from cart
        - rerenders cart without any items

    GET /checkout
        - displays checkout page
        - information about the client and the purchase is passed through the 'session' object
        - renders checkout.ejs

    POST /checkout
        - checks if terms & conditions are checked
        - saves billing details in the db
        - redirects to website where payment will be made (e.g. PayPal)
        - renders confirmation.ejs

VIEWS
    /PARTIALS
        header.ejs
        - contains header, menu and links to stylesheets
        - is included in all ejs files

        footer.ejs
        - contains footer
        - is included in all ejs files

    index.ejs
    - Shows all events. Each event has a 'read more' (GET events/:id) and a 'add to cart' (POST cart/:id) button

    show.ejs
    - Shows a single event with more information. Has a 'add to cart' button

    cart.ejs
    - Shows all the user's selected events
    - Allows user to remove and edit items before checkout

    checkout.ejs
    - Allows the user to choose payment method

    confirmation.ejs
    - Displays that the purchase has been successfully made

    error.ejs
    - Displays errors


MONGOOSE API




 model.setSchema(schema, cb):
    takes a schema and a callback
    sets this database's schema to schema
    executes callback with failure or success message
 
 model.getAll(CB):
    takes a callback
    retrieves all objects into an array
    executes callback with array if successful, with error if not

 model.getOne(ID, CB):
    takes a callback and an ID
    retrieves the object with that ID
    executes callback with object if successful, with error if not

 model.save(obj, CB):
    takes a callback and a new object
    attempts to save object to database
    executes callback with error or success status

 model.delete(ID, CB):
    takes a callback and an ID
    attempts to delete item from DB
    executes callback with error or success status

 model.update(ID, newObj, cb):
    takes a callback and an id and a new property  
    attempts to update existing object
    executes callback with error or success status