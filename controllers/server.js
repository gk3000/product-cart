var express = require('express'),
    app = express();
const router = express.Router()

app.set('view engine', 'ejs')


// SCHEMAS
var Events = require("../models/model.js")
Events.setSchema({
    name: {type: "string", required: true, unique: true},
    startDate : {type: "date", required: true}, 
    endDate : {type: "date", required: true}, 
    time : {type: "date", required: true},  
    subjects : {type: "array", subType: "string", required: true},  
    eventType : {type: "array", subType: "string", required: true} ,
    image :  {type :"string", required: true},
    details :{type :"string", required: true}, 
    price : {type :"number", required: true}  
})

var Sessions = require("../models/model")
Sessions.setSchema({
    eventIDs: {type: "array", subType: "string"}
})

var Shopping = require("../models/model")
Shopping.setSchema({})


// connect to our model with assigned variable to use inside the controller
// const eventsCollection = mongoose.model("events");
// const sessionCollection = mongoose.model("sessions")


// DUMMY EVENTS
var events = [
    {
        _id: 1, // will be generated by mongoose
        eventName: 'Code workshop',
        startDate: '20/02/2017',
        endDate: '21/02/2017',
        subjects: ['Node.js', 'express.js'],
        eventType: ['evening', 'one day'],
        image: 'https://i2.wp.com/www.barcelonacodeschool.com/wp-content/uploads/2016/04/students-in-classroom.jpg?zoom=1.5&fit=564%2C388',
        eventDetails: 'Details',
        price: 400
    },
    {
        _id: 2, // will be generated by mongoose
        eventName: 'JavaScript Full-Stack Bootcamp',
        eventDetails: '8 weeks, Monday to Friday, from 9:00 till you drop',
        startDate: '22/05/2017',
        endDate: '14/07/17',
        subjects: ['Node.js', 'express.js', 'mongoDB'],
        eventType: ['Three month course'],
        image: 'https://i2.wp.com/www.barcelonacodeschool.com/wp-content/uploads/2016/04/students-in-classroom.jpg?zoom=1.5&fit=564%2C388',
        price: 3000
    }
]

/*GET /events   
Displays the events calendar page
    renders the index.ejs view */
router.get("/events", function(req, res){
    Events.getAll( (err, events) =>{ 
    	if (err) {
    		res.redirect("error", {err})
    	} else {
            res.render("index", {events}) 
	    }
    })
})

/*
GET /events/:id
Displays the  selected single event page
    renders the show.ejs
*/
router.get ("/events/:id", function (req, res) {
	Events.getOne({id: req.params.id}, (err, event) => {
		if (err) {
			res.redirect("error", err)
		} else {
			res.render("show", {event})
		}
	})
})


/*
POST /cart/:id
- creates new session object
- adds event reference to session object
- creates new cookie with sessionID equal to session._id
- redirects to /cart
*/
router.post("/cart/:id", function(req, res){
    Sessions.save({eventIDs: [req.params.id]}, (err, session) =>{
        if (err) {
        	res.redirect("error", {err})
        } else {
            res.cookie('sessionID', session.id, { maxAge: 9000000000, httpOnly: false })
            res.render('cart', {session})
        }
    }) 
})


/*    
GET /cart
- displays the events the client has selected
- information about selected tickets and the client is stored in an object ('session')
- renders cart.ejs
*/
router.get("/cart", (req, res) => {
	// if session (from req.cookies.sessionID) exists 
	Sessions.getOne({id: req.cookies.sessionID}, (err, session) => {
		if (err) {
			res.redirect("error", {err})
		} else {
			//display cart with event associated to the current user
			res.render("cart", {session})
		}
	})

})

/*
GET /checkout/
Displays the checkout page for the user with his sessionID
renders the checkout.ejs
args: get, sessionID
*/

module.exports = router;



/*
POST /cart/update
Cart page with update the quantity of products
    renders the cart.ejs
args: post, sessionID, amount of products

POST /cart/remove
Cart page with remove the product option
    renders the cart.ejs
args: post, sessionID, remove event

GET /cart/coupon
Cart page with apply the coupon option to get a discount
    renders the cart.ejs
args: get, coupon, discoun

POST /checkout/pay
args: post, sessionID
– saves users billing details in the database
– check if the terms & conditions are checked
– redirects to/process the payment
– redirects back to the root or displays the confirmation page*/