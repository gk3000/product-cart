Controllers API 

// controllers/server


GET /events   
Displays the events calendar page
    renders the index.ejs view

GET /events/:id
Displays the  selected single event page
    renders the show.ejs

GET /cart/
Displays the cart page with selected events
    renders the cart.ejs
args: get, sessionID
User can proceed to the checkout page 


GET /checkout/
Displays the checkout page for the user with his sessionID
    renders the checkout.ejs
args: get, sessionID

POST /cart/update
Cart page with update the quantity of products
    renders the cart.ejs
args: post, sessionID, amount of products

POST /cart/remove
Cart page with remove the product option
    renders the cart.ejs
args: post, sessionID, remove event

GET /cart/coupon
Cart page with apply the coupon option to get a discount
    renders the cart.ejs
args: get, coupon, discoun

POST /checkout/pay
arge: post, sessionID
– saves users billing details in the database
– check if the terms & conditions are checked
– redirects to/process the payment
– redirects back to the root or displays the confirmation page



VIEWS API 
    /PARTIALS
        header.ejs
        - contains header, menu and links to stylesheets
        footer.ejs
        - contains footer

    index.ejs
    - Shows all events. They are clickable.

    show.ejs
    - Shows a single event with more information.

    cart.ejs
    - Shows all the user's selected events
    - Allows user to remove and edit items before checkout

    checkout.ejs
    - Allows the user to choose payment method




1)Mongoose Database
    event Schema
       args: create a record of event
       return: true if successful false if not
        it tries save and tells you if it worked
    events scheme  
        args: view the evnets with full datails
   update
    args: update event with changes
   Remove
    args : remove the event after end date


 
2) Structure of schema
    eventName: String,
    startDate: Date,
    endDate: Date,
    time:
    subjects: String,
    eventType: String,
    image: Sting,
    eventDetails: String,
    price: Number

   
3) After creating session id it will add to the database
   Structure of sessionSchema
   eventID: String
   sessinoId: String